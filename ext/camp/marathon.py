import discord
from discord.ext import commands

import random 

class ProblemCommandFlags(commands.FlagConverter, delimiter = ' ', prefix = '-'):
	d : int

class Marathon(commands.Cog):
	def __init__(self, bot):
		self.bot = bot

	def get_thread_problem(self, thread_id):
		thread_id = str(thread_id)

		active = [(key, val)
				  for key, val in
				  self.bot.data['marathon']['problems'].items()
				  if key == thread_id
				  ]

		if len(active) == 0:
			return None

		return active[0][1]

	@commands.command(name = "problem")
	async def mark_problem(self, ctx, difficulty : int = 0, *, s : str = "Nothing yet"):
		if not isinstance(ctx.channel, discord.Thread) and 0:
			await ctx.send("‡¶è‡¶á‡¶ü‡¶æ ‡¶§‡ßã ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶®‡¶æ‡•§ ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá‡¶∞ ‡¶≠‡¶ø‡¶§‡¶∞ ‡¶Æ‡¶æ‡¶∞‡¶æ ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡•§ ")
			return

		prb = self.get_thread_problem(ctx.channel.id)

		if prb:
			if prb['active']:
				await ctx.send("‡¶è‡¶á‡¶π‡¶æ‡¶®‡ßá ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡¶á ‡¶è‡¶ï‡¶ñ‡¶æ‡¶®‡¶æ ‡¶™‡ßç‡¶∞‡¶¨‡ßç‡¶≤‡ßá‡¶Æ ‡¶ö‡¶≤‡¶ø‡¶§‡ßá‡¶õ‡ßá‡•§")
			else:
				await ctx.send("‡¶è‡¶á‡¶π‡¶æ‡¶®‡ßá ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡¶á ‡¶è‡¶ï‡¶ñ‡¶æ‡¶®‡¶æ ‡¶™‡ßç‡¶∞‡¶¨‡ßç‡¶≤‡ßá‡¶Æ ‡¶π‡¶á‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶™‡¶®‡ßá ‡¶Ö‡¶®‡ßç‡¶Ø‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ø‡¶æ‡¶® ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶®‡¶ø‡ßü‡¶æ‡•§")
			return

		if difficulty == 0:
			await ctx.send("‡¶™‡ßç‡¶∞‡¶¨‡ßç‡¶≤‡ßá‡¶Æ‡ßá‡¶∞ ‡¶°‡¶ø‡¶´‡¶ø‡¶ï‡¶æ‡¶≤‡ßç‡¶ü‡¶ø ‡¶®‡¶æ ‡¶¶‡¶ø‡¶≤‡ßá ‡¶™‡¶æ‡¶¨‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶á‡¶∞‡ßá ‡¶Æ‡¶ú‡¶æ ‡¶™‡¶æ‡¶á‡¶¨‡ßã ‡¶ï‡¶ø?")
			return

		entry = {
			"thread" : ctx.channel.id,
			"owner" : ctx.author.id,
			"difficulty" : difficulty,
			"solver" : None,
			"active" : True
		}

		self.bot.data['marathon']['problems'][str(ctx.channel.id)] = entry
		self.bot.data.commit()

		reference = ctx.message.reference
		if reference:
			reference = reference.resolved
			await reference.pin()

		await ctx.message.add_reaction("üëå")

	@commands.command(name = "solved")
	async def solved(self, ctx, mem : discord.Member = None):

		prb = self.get_thread_problem(ctx.channel.id)

		if not prb:
			await ctx.send("‡¶è‡¶á ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßç‡¶∞‡¶¨‡ßç‡¶≤‡ßá‡¶Æ ‡¶ö‡¶≤‡¶ø‡¶§‡ßá‡¶õ‡ßá ‡¶®‡¶æ‡•§ ?problem ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßç‡¶∞‡¶¨‡ßç‡¶≤‡ßá‡¶Æ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶® ‡¶Ø‡¶æ‡¶á‡¶¨‡ßã‡•§ ")
			return

		if not prb['active']:
			await ctx.send("‡¶è‡¶á‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ø‡ßá ‡¶™‡ßç‡¶∞‡¶¨‡ßç‡¶≤‡ßá‡¶Æ ‡¶õ‡¶ø‡¶≤‡ßã ‡¶§‡¶æ ‡¶ï‡ßá ‡¶ú‡¶æ‡¶®‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶ï‡¶∞‡¶ø‡ßü‡¶æ ‡¶´‡ßá‡¶≤‡¶æ‡¶á‡¶õ‡ßá‡•§ ‡¶Ö‡¶π‡¶® ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ö‡¶®‡ßç‡¶Ø‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ø‡¶æ‡¶®‡•§ ")
			return

		if prb['owner'] != ctx.author.id:
			await ctx.send("‡¶Ö‡¶®‡ßç‡¶Ø‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶¨‡ßç‡¶≤‡ßá‡¶Æ‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ‡¶®‡¶æ ‡¶®‡¶ø‡¶ú‡ßá ‡¶ú‡¶æ‡¶π‡¶ø‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßá‡¶® ‡¶ï‡ßá‡¶®?")
			return

		reference = ctx.message.reference
		reference_author = None

		if (reference):
			reference_author = reference.resolved.author

		if not mem and not reference_author:
			await ctx.send("‡¶ï‡ßá ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡¶ø‡ßü‡¶æ ‡¶´‡¶æ‡¶≤‡¶æ‡¶á‡¶õ‡ßá ‡¶∏‡ßá‡¶ü‡¶æ ‡¶§‡ßã ‡¶ï‡¶®‡•§ ")
			return

		if mem and reference_author and mem.id != reference_author.id:
			await ctx.send("‡¶¶‡ßÅ‡¶á‡¶ú‡¶®‡¶ï‡ßá ‡¶è‡¶ï‡¶ú‡¶®‡ßá‡¶∞ ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶≠‡ßÅ‡ßü‡¶æ ‡¶ï‡ßç‡¶∞‡ßá‡¶°‡¶ø‡¶ü ‡¶¶‡ßá‡ßü‡¶æ ‡¶≠‡¶æ‡¶≤‡ßã ‡¶ï‡¶æ‡¶ú ‡¶®‡¶π‡ßá‡•§ ")
			return

		solver = mem or reference_author

		# if solver.id == prb['owner']:
		# 	await ctx.send("‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶¨‡ßç‡¶≤‡ßá‡¶Æ ‡¶®‡¶ø‡¶ú‡ßá‡¶á ‡¶ï‡¶á‡¶∞‡¶æ ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶ß‡ßã‡¶Å‡¶ï‡¶æ ‡¶¶‡ßá‡ßü‡¶æ ‡¶Ø‡¶æ‡¶á‡¶¨‡ßã ‡¶®‡¶æ‡•§ ")
		# 	return

		self.bot.data['marathon']['problems'][str(ctx.channel.id)]['active'] = False
		self.bot.data['marathon']['problems'][str(ctx.channel.id)]['solver'] = solver.id

		if str(solver.id) not in self.bot.data['marathon']['scores']:
			self.bot.data['marathon']['scores'][str(solver.id)] = prb['difficulty']
		else:
			self.bot.data['marathon']['scores'][str(solver.id)] += prb['difficulty']

		self.bot.data.commit()
		responses = [
			"‡¶†‡¶ø‡¶ï‡¶æ‡¶õ‡ßá‡•§",
			"‡¶™‡¶æ‡¶∞‡¶õ‡ßá? ‡¶≠‡¶æ‡¶≤‡¶æ ‡¶§‡ßã‡•§",
			"‡¶¨‡ßÅ‡¶ù‡¶≤‡¶æ‡¶Æ‡•§", 
			"‡¶è‡¶Æ‡ßç‡¶®‡ßá ‡¶™‡ßú‡¶æ‡¶≤‡ßá‡¶ñ‡¶æ ‡¶ö‡¶æ‡¶≤‡¶æ‡ßü ‡¶ó‡ßá‡¶≤‡ßá ‡¶ú‡ßÄ‡¶¨‡¶®‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶è‡¶ï‡¶ü‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶á‡¶¨‡ßã‡•§",
		]
		response_points_awarded = f"‡¶ì‡¶∞‡ßá {self.bot.data['marathon']['problems'][str(ctx.channel.id)]['difficulty']} ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü ‡¶¶‡¶ø‡¶≤‡¶æ‡¶Æ‡•§"
		await ctx.send(random.choice(responses) + " " + response_points_awarded)

		orig = ctx.channel.name
		await ctx.channel.edit(name = "[SOLVED] " + orig)

	@commands.command(name = 'cancel')
	async def cancel_problem(self, ctx):

		prb = self.get_thread_problem(ctx.channel.id)

		if not prb:
			await ctx.send("‡¶è‡¶á ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßç‡¶∞‡¶¨‡ßç‡¶≤‡ßá‡¶Æ ‡¶ö‡¶≤‡¶ø‡¶§‡ßá‡¶õ‡ßá ‡¶®‡¶æ‡•§ ?problem ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßç‡¶∞‡¶¨‡ßç‡¶≤‡ßá‡¶Æ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶® ‡¶Ø‡¶æ‡¶á‡¶¨‡ßã‡•§ ")
			return

		if not prb['active']:
			await ctx.send("‡¶è‡¶á‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ø‡ßá ‡¶™‡ßç‡¶∞‡¶¨‡ßç‡¶≤‡ßá‡¶Æ ‡¶õ‡¶ø‡¶≤‡ßã ‡¶§‡¶æ ‡¶ï‡ßá ‡¶ú‡¶æ‡¶®‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶ï‡¶∞‡¶ø‡ßü‡¶æ ‡¶´‡ßá‡¶≤‡¶æ‡¶á‡¶õ‡ßá‡•§ ‡¶Ö‡¶π‡¶® ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ö‡¶®‡ßç‡¶Ø‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ø‡¶æ‡¶®‡•§ ")
			return

		if prb['owner'] != ctx.author.id:
			await ctx.send("‡¶Ö‡¶®‡ßç‡¶Ø‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶¨‡ßç‡¶≤‡ßá‡¶Æ‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ‡¶®‡¶æ ‡¶®‡¶ø‡¶ú‡ßá ‡¶ú‡¶æ‡¶π‡¶ø‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßá‡¶® ‡¶ï‡ßá‡¶®?")
			return

		del self.bot.data['marathon']['problems'][str(ctx.channel.id)]
		await ctx.send("‡¶†‡¶ø‡¶ï‡¶æ‡¶õ‡ßá‡•§ ‡¶è‡¶ï‡¶ñ‡¶æ‡¶®‡¶æ ‡¶ö‡¶≤‡¶Æ‡¶æ‡¶® ‡¶™‡ßç‡¶∞‡¶¨‡ßç‡¶≤‡ßá‡¶Æ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡¶á‡¶≤‡ßã‡•§")

	@commands.command(name = 'scores')
	async def send_scoreboard(self, ctx):
		scores = self.bot.data['marathon']['scores']

		s = ""
		for user_id_str, score in sorted(scores.items(), key = lambda m : m[1], reverse = True):
			s += f"{self.bot.get_user(int(user_id_str)).display_name} - {score}\n"

		await ctx.send(s)

	@commands.command(name = 'rm')
	async def reload_extension_temporary(self, ctx):
		await self.bot.reload_extension('ext.camp.marathon')
		await ctx.send("üëå")

	@commands.command(name = "data")
	async def test_command(self, ctx):
		await ctx.send(self.bot.data.data)

async def setup(bot):
	await bot.add_cog(Marathon(bot))
